#!/usr/local/bin/perl

# emp -- email processor.
#
# this is its 3'rd version. it involves *much more* more-or-less
# confident and straightforward parsing that its 2'd version
# (it appears much easier to implement it though), and it can easily
# be applied to an absolutely raw file with mails obtained by your
# mail retrieval agent (e.g. fetchmail(1)), like neither of its
# precedents can. only interested and not that clear parts of a code
# are commented (hope that it's pretty clear though).
#
# what it does (apart from reading from stdin):
# - builds up a "From" line for UNIX mbox file format
#   (however, it doesn't follow it in terms of printing
#   the date in UTC - it doesn't do that).
# - leaves only a couple of letter headers (From, To, Date, Subject)
# - includes html and other weird message formats only if there
#   is no a plain text representation of a message provided. if it is,
#   it leaves only it and mail attachments.
# - performs a base64 decoding in all places it may occur
#   (headers, message body (text, no attachments)).
#
# with all theese features listed, it can be considered as a
# well-replacement for formail(1) utility (email-formatter,
# a part of a procmail(1) package).


use strict;
# tell to interpret input and output as UTF-8 strings.
use open ":std", ":encoding(UTF-8)";

# we'll use it for bare decoding base64 strings (message body).
use MIME::Base64;
# and for letter headers we'll use a dedicated module
# ('cause headers may be encoded in a really odd way).
use Encode qw(encode decode);


# a list of lines (headers) can be considered as letter-delimiters.
my @delimiters = (
	"Path: ",
	"Newsgroups: ",
	"Approved: ",
	"Delivered-To: ",
	"Received-SPF: ",
	"Authentication-Results: ",
	"ARC-Seal: ",
	"ARC-Message-Signature: ",
	"ARC-Authentication-Results: ",
	"Return-Path: ",
	"Received: ",
	"DKIM-Signature: ",
	"X-Google-DKIM-Signature: ",
	"X-Gm-Message-State: ",
	"X-Google-Smtp-Source: ",
	"X-Received: ",
	"X-Trace: ",
	"X-Complaints-To: ",
	"Original-X-From: ",
	"MIME-Version: ",
	"References: ",
	"In-Reply-To: ",
	"From: ",
	"Date: ",
	"Message-ID: ",
	"Subject: ",
	"To: ",
	"Cc: ",
	"Content-Type: "
);

# a hash-table will be used for saving header field values
# in case of them appearing not in that exact order I want them to.
my %wanted_headers = (
	"From: " => "",
	"To: " => "",
	"Subject: " => "",
	# having a separate date header. it's due to us not doing 
	# UTC convertion for UNIX mbox "From" delimiter line. and
	# for seeing the original timezone too.
	"Date: " => "",
	"Cc: " => ""
);

# we store previous header was processed, in order to
# append to it in case its value is broken into several lines.
my $prev_header = "";

# current message parts.
my @parts = ();

# current part (that will be added to @parts afterwards).
my %part = ();

# may be either "head" (mail headers),
# "message" - a zone preceding a first message part.
# (it's for multi-part messages only)
# or "text" - the message text itself (plain text, attachement...).
my $within = "text";

# a multi-part message delimiter string;
my $boundary = "";

# an output string for current letter being parsed.
my $letter_output = "";

# a string containing final output of a program.
my $final_output = "";

# address of a sender (need it for "From" line).
my $from_addr = "";
# a date, formatted for "From" line.
my $date_formatted = "";

my sub format_date {
	my ($date_input) = @_;
	
	# check if date format is not suitable for mbox "From" line.
	my (
		$week_day,
		$month_day,
		$month,
		$year,
		$time
	) = $date_input =~ /
		# Day of the week and maybe comma.
		(\w{3}),?
		# Month day.
		\s+(\d{1,2})
		# Month name.
		\s+(\w{3})
		# Year.
		\s+(\d{4})
		# Date.
		\s+(\d{1,2}:\d{1,2}:\d{1,2})
	/x;
	
	# add a leading zero to the month day if it is required.
	if (length($month_day) == 1) {
		$month_day = "0$month_day";
	}
	
	if ($week_day) {
		return "$week_day $month $month_day $time $year";
	}
	
	return $date_input;
}

# building up a letter delimiter line (according to UNIX mbox format).
# we ain't converting the date to UTC format though.
my sub build_from_line {
	return "From $from_addr  $date_formatted\n";
}

# headers may be encoded in base64.
my sub prepare_header {
	my ($line) = @_;
	
	# if header is not somehow encoded, it'll be printed as is.
	my $decoded = decode("MIME-Header", $line);
	
	return $decoded;
}

# if it's a multi-part message then switch to "message",
# otherwise - to "text".
# we also flush the header lines here.
my sub switch_to_message_or_text {
	$prev_header = "";
	
	if ($boundary) {
		$within = "message";
	} else {
		$within = "text";
	}
	
	my $from = prepare_header($wanted_headers{"From: "});
	my $to = prepare_header($wanted_headers{"To: "});
	
	my $date = $wanted_headers{"Date: "};
	
	# letter can easily has no "Subject" header at all.
	my $subject;
	if ($wanted_headers{"Subject: "} ne "") {
		$subject = prepare_header($wanted_headers{"Subject: "});
	} else {
		$subject = "Subject: <none>\n";
	}
	
	# the same with "Cc" field, but in case of that, we won't
	# print it at all (compare with dummy value for "Subject").
	my $cc;
	if ($wanted_headers{"Cc: "} ne "") {
		$cc = prepare_header($wanted_headers{"Cc: "});
	} else {
		$cc = "";
	}
	
	# because of the fact "From" header (as any other headers)
	# may be encoded, we want to decode it first (done in `prepare_header`),
	# for sender address be clear. and only after that want we build the
	# "From" delimiter line up.
	if ($from =~ /<(.*)>/) {
		$from_addr = $1;
	}
	
	my $from_line = build_from_line();
	
	my $headers = "$date$from$to$cc$subject";
	
	$letter_output .= "$from_line$headers\n";
}

my sub reset_variables {
	$wanted_headers{"From: "} = "";
	$wanted_headers{"To: "} = "";
	$wanted_headers{"Subject: "} = "";
	$wanted_headers{"Date: "} = "";
	
	$boundary = "";
	$letter_output = "";
	$from_addr = "";
	
	@parts = ();
	%part = ();
}

my sub flush_message {
	if ($boundary) {
		my @content_types = map { $_->{Type} } @parts;
		
		my @picked_parts = @parts;
		
		# drop other text representations if we already get plain text.
		if (grep(/text\/plain/, @content_types)) {
			@picked_parts = grep {
				$_->{Type} eq "text/plain"
				or
				$_->{Disposition} eq "attachment"
			} @parts;
		}
		
		# check the length of the array.
		# i.e. evaluate it in scalar context.
		my $picked_len = @picked_parts;
		
		my $single_part = $picked_len == 1;
		my $message_text = "";
		
		for my $picked_part (@picked_parts) {
			my $prepared_text = $picked_part->{Text};
			
			if (
				$picked_part->{"Transfer-Encoding"} eq "base64"
				and
				$picked_part->{Disposition} ne "attachment"
			) {
				$prepared_text = decode_base64($prepared_text) . "\n";
			}
			
			if ($single_part) {
				$message_text .= $prepared_text;
			}
			else {
				$message_text .= (
					"--$boundary\n"
					.
					"Content-Type: $picked_part->{Type}\n\n"
					.
					$prepared_text
				);
			}
		}
		
		if (not $single_part) {			
			$message_text .= "--$boundary--\n\n"
		}
		
		$letter_output .= $message_text;
	}
	
	$final_output .= $letter_output;
	
	reset_variables();
}

# read input line-by-line and accumulate different
# letter sections with futher flushing them (not all at once).
while ( my $line = <> ) {
	
	if (
		$within eq "message"
		or
		$within eq "text"
	) {
		
		if ($boundary) {
			if ($line =~ /^--$boundary--/) {
				if ($within eq "text") {
					push (@parts, { %part });
					%part = ();
				}
				
				$within = "text";
				
				next;
			}
			
			if ($line =~ /^--$boundary/) {
				if ($within eq "text") {
					push (@parts, { %part });
					%part = ();
				}
				
				$within = "types";
				
				next;
			}
		}
		
	}
	
	if ($within eq "text") {
		for my $delimiter (@delimiters) {
			if ($line =~ /^$delimiter/) {
				flush_message();
				
				$within = "head";
				goto handle_head;
			}
		}
		
		# for multi-part messages we accumulate the content
		# of each part separately (and then decide which to use).
		if ($boundary) {
			$part{"Text"} .= $line;
		}
		# for plain text messages we just print all the message text.
		else {
			$letter_output .= $line;
		}
		
		next;
	}
	
	if ($within eq "types") {
		
		if ($line eq "\n") {
			$within = "text";
			next;
		}
		
		my ($type, $value) = (
			$line =~ /Content-(.*?):\s(.*?)((;(\s?|\n))|\n)/
		);
		
		if (!$type) {
			next;
		}
		
		if (
			$type eq "Disposition"
			or
			$type eq "Transfer-Encoding"
			or
			$type eq "Type"
		) {
			$part{$type} = $value;
		}
		
		
	}
	
	# a lable for us to goto.
	handle_head:
	if ($within eq "head") {
		
		if ($line eq "\n") {
			switch_to_message_or_text();
			next;
		}
		
		# if line does NOT start with spaces, then it's
		# a begining of a new header field, so remember this.
		if ($line =~ /^([^\t\s]*?:\s).*/) {
			$prev_header = $1;
		}
		# otherwise, it's a continuation of previous header value
		# and we want to append it to already stored value so that
		# it to be a single string.
		else {
			# if it resembles an encoded string, we want to cut
			# all the leading spaces off.
			if ($line =~ /[\s\t]*=\?.*?\?(B|Q)\?(.*)\?=/) {
				$line =~ s/^[\t\s]*//;
			}
			
			# now, append it to previously saved value (from which
			# we need to remove the ending newline).
			if (grep(/$prev_header/, keys %wanted_headers)) {
				$wanted_headers{$prev_header} =~ s/\n//;
				$wanted_headers{$prev_header} .= $line;
				next;
			}
		}
		
		if ($line =~ /boundary=\"(.*)\"/) {
			$boundary = $1;
		}
		
		if ($line =~ /Date:\s(.*)/) {
			$date_formatted = format_date($1);
		}
		
		# pick and print only headers we want from.
		for my $wanted_header (keys %wanted_headers) {
			if ($line =~ /^$wanted_header/) {
				$wanted_headers{$wanted_header} = $line;
			}
		}
		
	}
	
}

# we need to ensure that the last message was flushed
# ('cause there ain't handling for end of input).
flush_message();

print $final_output;
